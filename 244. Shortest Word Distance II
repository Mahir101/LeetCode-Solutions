class WordDistance {
public:
    unordered_map<string, vector<int> > mp;
    int n;
    WordDistance(vector<string>& wordsDict) {
        this->n = wordsDict.size();
        for(int i=0; i<n; i++) {
            mp[wordsDict[i]].push_back(i);
        }
    }
    
    int shortest(string word1, string word2) {   
        vector<int> v1 = mp[word1];
        vector<int> v2 = mp[word2];
        int mn = n;

        if(v1.size()>v2.size()) {
            for(int i=0; i<v2.size() ;i++) {
                int vv1 = upper_bound(v1.begin(), v1.end(), v2[i])-v1.begin();
                int vv2 = lower_bound(v1.begin(), v1.end(), v2[i])-v1.begin();
                if(vv1<v1.size())
                    mn = min(mn, abs(v1[vv1]-v2[i]));
                else
                    mn = min(mn, abs(v1[vv1-1]-v2[i]));

                if(vv2<v1.size() && vv2>0)
                    mn = min(mn, abs(v1[vv2-1]-v2[i]));
          
            }
            return mn;
        } else {
            for(int i=0; i<v1.size() ;i++) {
                int vv1 = upper_bound(v2.begin(), v2.end(), v1[i])-v2.begin();
                int vv2 = lower_bound(v2.begin(), v2.end(), v1[i])-v2.begin();
                if(vv1<v2.size())
                    mn = min(mn, abs(v2[vv1]-v1[i]));
                else
                    mn = min(mn, abs(v2[vv1-1]-v1[i]));

                if(vv2<v2.size() && vv2>0)
                    mn = min(mn, abs(v2[vv2-1]-v1[i]));


            }
                 return mn;
        }


    }
};

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance* obj = new WordDistance(wordsDict);
 * int param_1 = obj->shortest(word1,word2);
 */
