class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = []
        track = []
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
                track.append('(')
            else:
                if len(stack) > 0 and track[len(stack)-1] == '(':
                    stack.pop()
                    track.pop()
                else:
                    stack.append(i)
                    track.append(')')
                    
         
        mx = 0
        stack = [-1] + stack + [len(s)]
        
        if len(stack) >= 2:
            for i in range(0, len(stack)-1):
                mx = max(mx, stack[i+1]-stack[i]-1)
        elif len(stack) == 1:
            mx = max(mx, len(s)-stack[len(stack)-1]-1)
        else:
            mx = len(s)
     

        return mx
            
#More efficient solution

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = [-1]
        mx = 0
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            else:
                stack.pop()
                if len(stack) == 0:
                    stack.append(i)
                else:
                    mx = max(mx, i-stack[len(stack)-1])
        return mx
            
                    
                    
