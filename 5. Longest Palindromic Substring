class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        bool dp[n+50][n+50];
        memset(dp, false, sizeof(dp));
        int x,y,mx=INT_MIN;
        for(int i=n-1; i>=0; i--) 
        {
            for(int j=i; j<=n-1; j++)
            {
                if(i==j) dp[i][j] = true;
                else if(s[i] == s[j]) {
                    if(j-i == 1) dp[i][j]=true;
                    else dp[i][j] = dp[i+1][j-1];  // mane hoilo "XabaX"  jodi aba hoi tahole XabaX o palindrom
                }
                if(dp[i][j] && j-i>=mx) {
                    mx=j-i;
                    x=i;
                    y=j;
                }
            }
        }
        return s.substr(x,y-x+1);
        
    }
};


//expand from center (leetcode solution-old tricks but tried DP, cause DP was awesome)

// public String longestPalindrome(String s) {
//     if (s == null || s.length() < 1) return "";
//     int start = 0, end = 0;
//     for (int i = 0; i < s.length(); i++) {
//         int len1 = expandAroundCenter(s, i, i);
//         int len2 = expandAroundCenter(s, i, i + 1);
//         int len = Math.max(len1, len2);
//         if (len > end - start) {
//             start = i - (len - 1) / 2;
//             end = i + len / 2;
//         }
//     }
//     return s.substring(start, end + 1);
// }

// private int expandAroundCenter(String s, int left, int right) {
//     int L = left, R = right;
//     while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
//         L--;
//         R++;
//     }
//     return R - L - 1;
// }
