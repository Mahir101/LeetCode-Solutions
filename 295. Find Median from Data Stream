class MedianFinder {
private:
    priority_queue<int> lower;
    priority_queue<int, vector<int>, greater<int>> higher;
public:
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(lower.empty()) {
            lower.push(num);
            return;
        }
        
        if(lower.size() > higher.size()) {
            if(lower.top() > num) {
                higher.push(lower.top());
                lower.pop();
                lower.push(num);
            } else
                higher.push(num);
        } else {
            if(num > higher.top()) {
                lower.push(higher.top());
                higher.pop();
                higher.push(num);
            } else
                lower.push(num);
        }
    }
    
    double findMedian() {
        double result = 0.0;
        
        if (lower.size() == higher.size()) {
            result = lower.top()+(higher.top()-lower.top())/ 2.0;
        } else {
            if (lower.size() > higher.size()) {
                result = lower.top();
            } else {
                result = higher.top();
            }
        }
        return result;
    }
};

class MedianFinder:

    def __init__(self):
        self.small, self.large = [], []

    def addNum(self, num: int) -> None:
        heapq.heappush(self.small, -1 * num)
        
        if self.small and self.large and (-1 * self.small[0]) > self.large[0]:
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)

        if len(self.small) > len(self.large) + 1:
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)
        if len(self.large) > len(self.small) + 1:
            val = heapq.heappop(self.large)
            heapq.heappush(self.small, -1 * val)
        
    def findMedian(self) -> float:
        if len(self.small) > len(self.large):
            return -1 * self.small[0]
        elif len(self.large) > len(self.small):
            return self.large[0]
        return (-1 * self.small[0] + self.large[0]) / 2
        
